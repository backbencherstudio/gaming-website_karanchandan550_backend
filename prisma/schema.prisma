generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String    @id @default(cuid())
  user_id             String
  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

// model RoleUser {
//   id        String   @id @default(uuid())
//   user_id   String
//   role_id   String
//   user      User     @relation(fields: [user_id], references: [id])
//   role      Role     @relation(fields: [role_id], references: [id])
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("role_user")
// }

// Make sure your User and Role models have the relation defined
model User {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  email      String? @unique
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
  password   String? @db.VarChar(255)

  billing_id String?

  type              String?   @default("user")
  email_verified_at DateTime?

  accounts             Account[]
  payment_transactions PaymentTransaction[]
  subscriptions        Subscription[]
  ucodes               Ucode[]
  roles               RoleUser[]    
  owned_roles         Role[]        // Add this line for the opposite relation

  @@map("users")
}

model Ucode {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1) @db.SmallInt

  user_id    String?
  token      String?
  email      String?
  expired_at DateTime?
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("ucodes")
}

model PaymentTransaction {
  id               String    @id @default(cuid())
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())
  deleted_at       DateTime?
  user_id          String?
  customer_id String
  type             String?   @default("subscription")
  provider         String?   @default("stripe")
  reference_number String?
  status           String?   @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?
  invoice_url      String?
  user             User?     @relation(fields: [user_id], references: [id])

  @@map("payment_transactions")
}

model Subscription {
  id                    String    @id @default(uuid())
  user_id              String
  stripe_customer_id   String
  stripe_subscription_id String   @unique  // Add @unique constraint
  status               String
  plan_type           String
  current_period_start DateTime
  current_period_end   DateTime
  cancel_at_period_end Boolean   @default(false)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?
  user                User      @relation(fields: [user_id], references: [id])

  @@map("subscriptions")
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status           Int?             @default(1) @db.SmallInt
  title            String?
  name             String?
  user_id          String?
  permission_roles PermissionRole[]
  role_users       RoleUser[]
  user             User?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status           Int?             @default(1) @db.SmallInt
  title            String?
  action           String?
  subject          String?
  conditions       String?
  fields           String?
  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id String
  role_id       String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id String
  user_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

model Product {
  id            String    @id @default(cuid())
  name          String
  type          String
  category      String
  regularPrice  Decimal
  discountPrice Decimal?
  imageUrl      String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  @@map("products")
}
